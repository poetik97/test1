// Prisma Schema para Organiza-te360
// Supabase PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USERS & AUTH
// ============================================

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  password      String?
  loginMethod   String?
  role          Role      @default(user)
  createdAt     DateTime  @default(now())
  lastSignedIn  DateTime  @default(now())
  
  // Profile
  avatar        String?
  bio           String?
  timezone      String    @default("Europe/Lisbon")
  language      String    @default("pt")
  
  // Gamification
  level         Int       @default(1)
  xp            Int       @default(0)
  streak        Int       @default(0)
  lastActivityDate DateTime?
  
  // Relations
  tasks         Task[]
  events        Event[]
  goals         Goal[]
  transactions  Transaction[]
  diaryEntries  DiaryEntry[]
  chatMessages  ChatMessage[]
  notifications Notification[]
  automations   Automation[]
  menstrualCycles MenstrualCycle[]
  userBadges    UserBadge[]
  achievements  Achievement[]
  googleToken   GoogleToken?
  
  @@map("users")
}

enum Role {
  user
  admin
}

// ============================================
// TASKS
// ============================================

model Task {
  id            String    @id @default(uuid())
  userId        String
  title         String
  description   String?
  status        TaskStatus @default(todo)
  priority      Priority  @default(medium)
  category      Category  @default(other)
  dueDate       DateTime?
  scheduledTime String?
  estimatedTime Int?      // minutes
  completedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("tasks")
  @@index([userId])
}

enum TaskStatus {
  todo
  in_progress
  done
  archived
}

enum Priority {
  low
  medium
  high
}

enum Category {
  work
  personal
  health
  finance
  other
}

// ============================================
// EVENTS / CALENDAR
// ============================================

model Event {
  id            String    @id @default(uuid())
  userId        String
  title         String
  description   String?
  startTime     DateTime
  endTime       DateTime
  location      String?
  category      Category  @default(other)
  color         String?
  googleEventId String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("events")
  @@index([userId])
}

// ============================================
// GOALS
// ============================================

model Goal {
  id            String      @id @default(uuid())
  userId        String
  title         String
  description   String?
  targetValue   Int
  currentValue  Int         @default(0)
  unit          String
  deadline      DateTime?
  status        GoalStatus  @default(active)
  category      Category    @default(other)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  checkins      GoalCheckin[]
  
  @@map("goals")
  @@index([userId])
}

enum GoalStatus {
  active
  completed
  paused
  cancelled
}

model GoalCheckin {
  id            String    @id @default(uuid())
  goalId        String
  value         Int
  note          String?
  createdAt     DateTime  @default(now())
  
  goal          Goal      @relation(fields: [goalId], references: [id], onDelete: Cascade)
  
  @@map("goal_checkins")
  @@index([goalId])
}

// ============================================
// FINANCES
// ============================================

model Transaction {
  id            String          @id @default(uuid())
  userId        String
  type          TransactionType
  amount        Float
  category      String
  description   String?
  date          DateTime
  createdAt     DateTime        @default(now())
  
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
  @@index([userId])
}

enum TransactionType {
  income
  expense
}

model FinancialCategory {
  id            String    @id @default(uuid())
  name          String
  type          TransactionType
  icon          String?
  color         String?
  budget        Float?
  createdAt     DateTime  @default(now())
  
  @@map("financial_categories")
}

// ============================================
// DIARY
// ============================================

model DiaryEntry {
  id            String    @id @default(uuid())
  userId        String
  title         String?
  content       String
  mood          String?
  tags          String[]
  sentiment     String?
  sentimentScore Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("diary_entries")
  @@index([userId])
}

// ============================================
// CHAT / AI
// ============================================

model ChatMessage {
  id            String    @id @default(uuid())
  userId        String
  role          String
  content       String
  createdAt     DateTime  @default(now())
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
  @@index([userId])
}

// ============================================
// NOTIFICATIONS
// ============================================

model Notification {
  id            String    @id @default(uuid())
  userId        String
  title         String
  message       String
  type          String
  read          Boolean   @default(false)
  actionUrl     String?
  createdAt     DateTime  @default(now())
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
  @@index([userId])
}

// ============================================
// AUTOMATIONS
// ============================================

model Automation {
  id            String    @id @default(uuid())
  userId        String
  name          String
  description   String?
  trigger       Json
  action        Json
  enabled       Boolean   @default(true)
  lastRun       DateTime?
  createdAt     DateTime  @default(now())
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("automations")
  @@index([userId])
}

// ============================================
// MENSTRUAL CYCLE
// ============================================

model MenstrualCycle {
  id            String    @id @default(uuid())
  userId        String
  startDate     DateTime
  endDate       DateTime?
  cycleLength   Int?
  periodLength  Int?
  flow          String?
  symptoms      String[]
  mood          String?
  notes         String?
  createdAt     DateTime  @default(now())
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("menstrual_cycles")
  @@index([userId])
}

// ============================================
// GAMIFICATION
// ============================================

model Badge {
  id            String      @id @default(uuid())
  name          String
  description   String?
  icon          String?
  category      String?
  requirement   Json?
  rarity        BadgeRarity @default(common)
  xpReward      Int         @default(0)
  createdAt     DateTime    @default(now())
  
  userBadges    UserBadge[]
  
  @@map("badges")
}

enum BadgeRarity {
  common
  rare
  epic
  legendary
}

model UserBadge {
  id            String    @id @default(uuid())
  userId        String
  badgeId       String
  earnedAt      DateTime  @default(now())
  progress      Int       @default(0)
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge         Badge     @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  
  @@map("user_badges")
  @@index([userId])
  @@index([badgeId])
}

model Achievement {
  id            String    @id @default(uuid())
  userId        String
  type          String
  title         String
  description   String?
  xpEarned      Int       @default(0)
  metadata      Json?
  createdAt     DateTime  @default(now())
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("achievements")
  @@index([userId])
}

// ============================================
// GOOGLE INTEGRATION
// ============================================

model GoogleToken {
  id            String    @id @default(uuid())
  userId        String    @unique
  accessToken   String
  refreshToken  String
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id])
  
  @@map("google_tokens")
}

